#!/usr/bin/env node

import fs from 'fs'
import path from 'path'
import { fileURLToPath } from 'url'

const __filename = fileURLToPath(import.meta.url)
const __dirname = path.dirname(__filename)

// Directories
const promptsDir = path.join(__dirname, '..', 'prompts')
const dataDir = path.join(__dirname, '..', 'src', 'forge', 'data')

// Ensure data directory exists
if (!fs.existsSync(dataDir)) {
  fs.mkdirSync(dataDir, { recursive: true })
}

// Function to convert markdown content to TypeScript template string
function convertToTypeScript(filename, content) {
  // Remove .md extension and add .ts
  const tsFilename = filename.replace(/\.md$/, '.ts')

  // Escape backticks and template literals in the content
  const escapedContent = content
    .replace(/\\/g, '\\\\') // Escape backslashes
    .replace(/`/g, '\\`') // Escape backticks
    .replace(/\$\{/g, '\\${') // Escape template literal expressions

  // Create TypeScript content with default export
  const tsContent = `// Auto-generated from ${filename}
// Do not edit this file directly - edit the source markdown file instead

export default \`${escapedContent}\`;
`

  return { filename: tsFilename, content: tsContent }
}

// Main conversion function
function convertPrompts() {
  try {
    // Check if prompts directory exists
    if (!fs.existsSync(promptsDir)) {
      console.error('Prompts directory does not exist:', promptsDir)
      process.exit(1)
    }

    // Read all files in prompts directory
    const files = fs.readdirSync(promptsDir)
    const mdFiles = files.filter((file) => file.endsWith('.md'))

    if (mdFiles.length === 0) {
      console.log('No markdown files found in prompts directory')
      return
    }

    console.log(`Found ${mdFiles.length} markdown file(s) to convert:`)

    // Process each markdown file
    mdFiles.forEach((mdFile) => {
      console.log(`- Processing: ${mdFile}`)

      // Read markdown content
      const mdPath = path.join(promptsDir, mdFile)
      const mdContent = fs.readFileSync(mdPath, 'utf8')

      // Convert to TypeScript
      const { filename: tsFilename, content: tsContent } = convertToTypeScript(
        mdFile,
        mdContent
      )

      // Write TypeScript file
      const tsPath = path.join(dataDir, tsFilename)
      fs.writeFileSync(tsPath, tsContent, 'utf8')

      console.log(`  âœ“ Created: ${tsFilename}`)
    })

    console.log(
      `\nConversion complete! Generated ${mdFiles.length} TypeScript file(s) in ${dataDir}`
    )
  } catch (error) {
    console.error('Error during conversion:', error.message)
    process.exit(1)
  }
}

// Run the conversion
convertPrompts()
