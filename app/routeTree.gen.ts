/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as VirtualImport } from './routes/virtual'
import { Route as TableImport } from './routes/table'
import { Route as StoreImport } from './routes/store'
import { Route as StartImport } from './routes/start'
import { Route as SponsorsEmbedImport } from './routes/sponsors-embed'
import { Route as RouterImport } from './routes/router'
import { Route as RangerImport } from './routes/ranger'
import { Route as QueryImport } from './routes/query'
import { Route as MerchImport } from './routes/merch'
import { Route as LoginImport } from './routes/login'
import { Route as FormImport } from './routes/form'
import { Route as DashboardImport } from './routes/dashboard'
import { Route as ConfigImport } from './routes/config'
import { Route as BlogImport } from './routes/blog'
import { Route as LibrariesImport } from './routes/_libraries'
import { Route as IndexImport } from './routes/index'
import { Route as VirtualIndexImport } from './routes/virtual.index'
import { Route as TableIndexImport } from './routes/table.index'
import { Route as StoreIndexImport } from './routes/store.index'
import { Route as StartIndexImport } from './routes/start.index'
import { Route as RouterIndexImport } from './routes/router.index'
import { Route as RangerIndexImport } from './routes/ranger.index'
import { Route as QueryIndexImport } from './routes/query.index'
import { Route as FormIndexImport } from './routes/form.index'
import { Route as ConfigIndexImport } from './routes/config.index'
import { Route as BlogIndexImport } from './routes/blog.index'
import { Route as VirtualVersionImport } from './routes/virtual.$version'
import { Route as TableVersionImport } from './routes/table.$version'
import { Route as StoreVersionImport } from './routes/store.$version'
import { Route as StartVersionImport } from './routes/start.$version'
import { Route as RouterVersionImport } from './routes/router.$version'
import { Route as RangerVersionImport } from './routes/ranger.$version'
import { Route as QueryVersionImport } from './routes/query.$version'
import { Route as FormVersionImport } from './routes/form.$version'
import { Route as ConfigVersionImport } from './routes/config.$version'
import { Route as BlogSplatImport } from './routes/blog.$'
import { Route as VirtualVersionDocsImport } from './routes/virtual.$version.docs'
import { Route as TableVersionDocsImport } from './routes/table.$version.docs'
import { Route as StoreVersionDocsImport } from './routes/store.$version.docs'
import { Route as RouterVersionDocsImport } from './routes/router.$version.docs'
import { Route as RangerVersionDocsImport } from './routes/ranger.$version.docs'
import { Route as QueryVersionDocsImport } from './routes/query.$version.docs'
import { Route as FormVersionDocsImport } from './routes/form.$version.docs'
import { Route as ConfigVersionDocsImport } from './routes/config.$version.docs'
import { Route as VirtualVersionDocsIndexImport } from './routes/virtual.$version.docs.index'
import { Route as TableVersionDocsIndexImport } from './routes/table.$version.docs.index'
import { Route as StoreVersionDocsIndexImport } from './routes/store.$version.docs.index'
import { Route as RouterVersionDocsIndexImport } from './routes/router.$version.docs.index'
import { Route as RangerVersionDocsIndexImport } from './routes/ranger.$version.docs.index'
import { Route as QueryVersionDocsIndexImport } from './routes/query.$version.docs.index'
import { Route as FormVersionDocsIndexImport } from './routes/form.$version.docs.index'
import { Route as ConfigVersionDocsIndexImport } from './routes/config.$version.docs.index'
import { Route as LibrariesVirtualVersionIndexImport } from './routes/_libraries.virtual.$version.index'
import { Route as LibrariesTableVersionIndexImport } from './routes/_libraries.table.$version.index'
import { Route as LibrariesStoreVersionIndexImport } from './routes/_libraries.store.$version.index'
import { Route as LibrariesStartVersionIndexImport } from './routes/_libraries.start.$version.index'
import { Route as LibrariesRouterVersionIndexImport } from './routes/_libraries.router.$version.index'
import { Route as LibrariesRangerVersionIndexImport } from './routes/_libraries.ranger.$version.index'
import { Route as LibrariesQueryVersionIndexImport } from './routes/_libraries.query.$version.index'
import { Route as LibrariesFormVersionIndexImport } from './routes/_libraries.form.$version.index'
import { Route as LibrariesConfigVersionIndexImport } from './routes/_libraries.config.$version.index'
import { Route as VirtualVersionDocsSplatImport } from './routes/virtual.$version.docs.$'
import { Route as TableVersionDocsSplatImport } from './routes/table.$version.docs.$'
import { Route as StoreVersionDocsSplatImport } from './routes/store.$version.docs.$'
import { Route as RouterVersionDocsSplatImport } from './routes/router.$version.docs.$'
import { Route as RangerVersionDocsSplatImport } from './routes/ranger.$version.docs.$'
import { Route as QueryVersionDocsSplatImport } from './routes/query.$version.docs.$'
import { Route as FormVersionDocsSplatImport } from './routes/form.$version.docs.$'
import { Route as ConfigVersionDocsSplatImport } from './routes/config.$version.docs.$'
import { Route as VirtualVersionDocsFrameworkFrameworkIndexImport } from './routes/virtual.$version.docs.framework.$framework.index'
import { Route as TableVersionDocsFrameworkFrameworkIndexImport } from './routes/table.$version.docs.framework.$framework.index'
import { Route as StoreVersionDocsFrameworkFrameworkIndexImport } from './routes/store.$version.docs.framework.$framework.index'
import { Route as RouterVersionDocsFrameworkFrameworkIndexImport } from './routes/router.$version.docs.framework.$framework.index'
import { Route as RangerVersionDocsFrameworkFrameworkIndexImport } from './routes/ranger.$version.docs.framework.$framework.index'
import { Route as QueryVersionDocsFrameworkFrameworkIndexImport } from './routes/query.$version.docs.framework.$framework.index'
import { Route as FormVersionDocsFrameworkFrameworkIndexImport } from './routes/form.$version.docs.framework.$framework.index'
import { Route as VirtualVersionDocsFrameworkFrameworkSplatImport } from './routes/virtual.$version.docs.framework.$framework.$'
import { Route as TableVersionDocsFrameworkFrameworkSplatImport } from './routes/table.$version.docs.framework.$framework.$'
import { Route as StoreVersionDocsFrameworkFrameworkSplatImport } from './routes/store.$version.docs.framework.$framework.$'
import { Route as RouterVersionDocsFrameworkFrameworkSplatImport } from './routes/router.$version.docs.framework.$framework.$'
import { Route as RangerVersionDocsFrameworkFrameworkSplatImport } from './routes/ranger.$version.docs.framework.$framework.$'
import { Route as QueryVersionDocsFrameworkFrameworkSplatImport } from './routes/query.$version.docs.framework.$framework.$'
import { Route as FormVersionDocsFrameworkFrameworkSplatImport } from './routes/form.$version.docs.framework.$framework.$'
import { Route as VirtualVersionDocsFrameworkFrameworkExamplesIndexImport } from './routes/virtual.$version.docs.framework.$framework.examples.index'
import { Route as TableVersionDocsFrameworkFrameworkExamplesIndexImport } from './routes/table.$version.docs.framework.$framework.examples.index'
import { Route as StoreVersionDocsFrameworkFrameworkExamplesIndexImport } from './routes/store.$version.docs.framework.$framework.examples.index'
import { Route as RouterVersionDocsFrameworkFrameworkExamplesIndexImport } from './routes/router.$version.docs.framework.$framework.examples.index'
import { Route as RangerVersionDocsFrameworkFrameworkExamplesIndexImport } from './routes/ranger.$version.docs.framework.$framework.examples.index'
import { Route as QueryVersionDocsFrameworkFrameworkExamplesIndexImport } from './routes/query.$version.docs.framework.$framework.examples.index'
import { Route as FormVersionDocsFrameworkFrameworkExamplesIndexImport } from './routes/form.$version.docs.framework.$framework.examples.index'
import { Route as VirtualVersionDocsFrameworkFrameworkExamplesSplatImport } from './routes/virtual.$version.docs.framework.$framework.examples.$'
import { Route as TableVersionDocsFrameworkFrameworkExamplesSplatImport } from './routes/table.$version.docs.framework.$framework.examples.$'
import { Route as StoreVersionDocsFrameworkFrameworkExamplesSplatImport } from './routes/store.$version.docs.framework.$framework.examples.$'
import { Route as RouterVersionDocsFrameworkFrameworkExamplesSplatImport } from './routes/router.$version.docs.framework.$framework.examples.$'
import { Route as RangerVersionDocsFrameworkFrameworkExamplesSplatImport } from './routes/ranger.$version.docs.framework.$framework.examples.$'
import { Route as QueryVersionDocsFrameworkFrameworkExamplesSplatImport } from './routes/query.$version.docs.framework.$framework.examples.$'
import { Route as FormVersionDocsFrameworkFrameworkExamplesSplatImport } from './routes/form.$version.docs.framework.$framework.examples.$'

// Create/Update Routes

const VirtualRoute = VirtualImport.update({
  path: '/virtual',
  getParentRoute: () => rootRoute,
} as any)

const TableRoute = TableImport.update({
  path: '/table',
  getParentRoute: () => rootRoute,
} as any)

const StoreRoute = StoreImport.update({
  path: '/store',
  getParentRoute: () => rootRoute,
} as any)

const StartRoute = StartImport.update({
  path: '/start',
  getParentRoute: () => rootRoute,
} as any)

const SponsorsEmbedRoute = SponsorsEmbedImport.update({
  path: '/sponsors-embed',
  getParentRoute: () => rootRoute,
} as any)

const RouterRoute = RouterImport.update({
  path: '/router',
  getParentRoute: () => rootRoute,
} as any)

const RangerRoute = RangerImport.update({
  path: '/ranger',
  getParentRoute: () => rootRoute,
} as any)

const QueryRoute = QueryImport.update({
  path: '/query',
  getParentRoute: () => rootRoute,
} as any)

const MerchRoute = MerchImport.update({
  path: '/merch',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const FormRoute = FormImport.update({
  path: '/form',
  getParentRoute: () => rootRoute,
} as any)

const DashboardRoute = DashboardImport.update({
  path: '/dashboard',
  getParentRoute: () => rootRoute,
} as any)

const ConfigRoute = ConfigImport.update({
  path: '/config',
  getParentRoute: () => rootRoute,
} as any)

const BlogRoute = BlogImport.update({
  path: '/blog',
  getParentRoute: () => rootRoute,
} as any)

const LibrariesRoute = LibrariesImport.update({
  id: '/_libraries',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const VirtualIndexRoute = VirtualIndexImport.update({
  path: '/',
  getParentRoute: () => VirtualRoute,
} as any)

const TableIndexRoute = TableIndexImport.update({
  path: '/',
  getParentRoute: () => TableRoute,
} as any)

const StoreIndexRoute = StoreIndexImport.update({
  path: '/',
  getParentRoute: () => StoreRoute,
} as any)

const StartIndexRoute = StartIndexImport.update({
  path: '/',
  getParentRoute: () => StartRoute,
} as any)

const RouterIndexRoute = RouterIndexImport.update({
  path: '/',
  getParentRoute: () => RouterRoute,
} as any)

const RangerIndexRoute = RangerIndexImport.update({
  path: '/',
  getParentRoute: () => RangerRoute,
} as any)

const QueryIndexRoute = QueryIndexImport.update({
  path: '/',
  getParentRoute: () => QueryRoute,
} as any)

const FormIndexRoute = FormIndexImport.update({
  path: '/',
  getParentRoute: () => FormRoute,
} as any)

const ConfigIndexRoute = ConfigIndexImport.update({
  path: '/',
  getParentRoute: () => ConfigRoute,
} as any)

const BlogIndexRoute = BlogIndexImport.update({
  path: '/',
  getParentRoute: () => BlogRoute,
} as any)

const VirtualVersionRoute = VirtualVersionImport.update({
  path: '/$version',
  getParentRoute: () => VirtualRoute,
} as any)

const TableVersionRoute = TableVersionImport.update({
  path: '/$version',
  getParentRoute: () => TableRoute,
} as any)

const StoreVersionRoute = StoreVersionImport.update({
  path: '/$version',
  getParentRoute: () => StoreRoute,
} as any)

const StartVersionRoute = StartVersionImport.update({
  path: '/$version',
  getParentRoute: () => StartRoute,
} as any)

const RouterVersionRoute = RouterVersionImport.update({
  path: '/$version',
  getParentRoute: () => RouterRoute,
} as any)

const RangerVersionRoute = RangerVersionImport.update({
  path: '/$version',
  getParentRoute: () => RangerRoute,
} as any)

const QueryVersionRoute = QueryVersionImport.update({
  path: '/$version',
  getParentRoute: () => QueryRoute,
} as any)

const FormVersionRoute = FormVersionImport.update({
  path: '/$version',
  getParentRoute: () => FormRoute,
} as any)

const ConfigVersionRoute = ConfigVersionImport.update({
  path: '/$version',
  getParentRoute: () => ConfigRoute,
} as any)

const BlogSplatRoute = BlogSplatImport.update({
  path: '/$',
  getParentRoute: () => BlogRoute,
} as any)

const VirtualVersionDocsRoute = VirtualVersionDocsImport.update({
  path: '/docs',
  getParentRoute: () => VirtualVersionRoute,
} as any)

const TableVersionDocsRoute = TableVersionDocsImport.update({
  path: '/docs',
  getParentRoute: () => TableVersionRoute,
} as any)

const StoreVersionDocsRoute = StoreVersionDocsImport.update({
  path: '/docs',
  getParentRoute: () => StoreVersionRoute,
} as any)

const RouterVersionDocsRoute = RouterVersionDocsImport.update({
  path: '/docs',
  getParentRoute: () => RouterVersionRoute,
} as any)

const RangerVersionDocsRoute = RangerVersionDocsImport.update({
  path: '/docs',
  getParentRoute: () => RangerVersionRoute,
} as any)

const QueryVersionDocsRoute = QueryVersionDocsImport.update({
  path: '/docs',
  getParentRoute: () => QueryVersionRoute,
} as any)

const FormVersionDocsRoute = FormVersionDocsImport.update({
  path: '/docs',
  getParentRoute: () => FormVersionRoute,
} as any)

const ConfigVersionDocsRoute = ConfigVersionDocsImport.update({
  path: '/docs',
  getParentRoute: () => ConfigVersionRoute,
} as any)

const VirtualVersionDocsIndexRoute = VirtualVersionDocsIndexImport.update({
  path: '/',
  getParentRoute: () => VirtualVersionDocsRoute,
} as any)

const TableVersionDocsIndexRoute = TableVersionDocsIndexImport.update({
  path: '/',
  getParentRoute: () => TableVersionDocsRoute,
} as any)

const StoreVersionDocsIndexRoute = StoreVersionDocsIndexImport.update({
  path: '/',
  getParentRoute: () => StoreVersionDocsRoute,
} as any)

const RouterVersionDocsIndexRoute = RouterVersionDocsIndexImport.update({
  path: '/',
  getParentRoute: () => RouterVersionDocsRoute,
} as any)

const RangerVersionDocsIndexRoute = RangerVersionDocsIndexImport.update({
  path: '/',
  getParentRoute: () => RangerVersionDocsRoute,
} as any)

const QueryVersionDocsIndexRoute = QueryVersionDocsIndexImport.update({
  path: '/',
  getParentRoute: () => QueryVersionDocsRoute,
} as any)

const FormVersionDocsIndexRoute = FormVersionDocsIndexImport.update({
  path: '/',
  getParentRoute: () => FormVersionDocsRoute,
} as any)

const ConfigVersionDocsIndexRoute = ConfigVersionDocsIndexImport.update({
  path: '/',
  getParentRoute: () => ConfigVersionDocsRoute,
} as any)

const LibrariesVirtualVersionIndexRoute =
  LibrariesVirtualVersionIndexImport.update({
    path: '/virtual/$version/',
    getParentRoute: () => LibrariesRoute,
  } as any)

const LibrariesTableVersionIndexRoute = LibrariesTableVersionIndexImport.update(
  {
    path: '/table/$version/',
    getParentRoute: () => LibrariesRoute,
  } as any
)

const LibrariesStoreVersionIndexRoute = LibrariesStoreVersionIndexImport.update(
  {
    path: '/store/$version/',
    getParentRoute: () => LibrariesRoute,
  } as any
)

const LibrariesStartVersionIndexRoute = LibrariesStartVersionIndexImport.update(
  {
    path: '/start/$version/',
    getParentRoute: () => LibrariesRoute,
  } as any
)

const LibrariesRouterVersionIndexRoute =
  LibrariesRouterVersionIndexImport.update({
    path: '/router/$version/',
    getParentRoute: () => LibrariesRoute,
  } as any)

const LibrariesRangerVersionIndexRoute =
  LibrariesRangerVersionIndexImport.update({
    path: '/ranger/$version/',
    getParentRoute: () => LibrariesRoute,
  } as any)

const LibrariesQueryVersionIndexRoute = LibrariesQueryVersionIndexImport.update(
  {
    path: '/query/$version/',
    getParentRoute: () => LibrariesRoute,
  } as any
)

const LibrariesFormVersionIndexRoute = LibrariesFormVersionIndexImport.update({
  path: '/form/$version/',
  getParentRoute: () => LibrariesRoute,
} as any)

const LibrariesConfigVersionIndexRoute =
  LibrariesConfigVersionIndexImport.update({
    path: '/config/$version/',
    getParentRoute: () => LibrariesRoute,
  } as any)

const VirtualVersionDocsSplatRoute = VirtualVersionDocsSplatImport.update({
  path: '/$',
  getParentRoute: () => VirtualVersionDocsRoute,
} as any)

const TableVersionDocsSplatRoute = TableVersionDocsSplatImport.update({
  path: '/$',
  getParentRoute: () => TableVersionDocsRoute,
} as any)

const StoreVersionDocsSplatRoute = StoreVersionDocsSplatImport.update({
  path: '/$',
  getParentRoute: () => StoreVersionDocsRoute,
} as any)

const RouterVersionDocsSplatRoute = RouterVersionDocsSplatImport.update({
  path: '/$',
  getParentRoute: () => RouterVersionDocsRoute,
} as any)

const RangerVersionDocsSplatRoute = RangerVersionDocsSplatImport.update({
  path: '/$',
  getParentRoute: () => RangerVersionDocsRoute,
} as any)

const QueryVersionDocsSplatRoute = QueryVersionDocsSplatImport.update({
  path: '/$',
  getParentRoute: () => QueryVersionDocsRoute,
} as any)

const FormVersionDocsSplatRoute = FormVersionDocsSplatImport.update({
  path: '/$',
  getParentRoute: () => FormVersionDocsRoute,
} as any)

const ConfigVersionDocsSplatRoute = ConfigVersionDocsSplatImport.update({
  path: '/$',
  getParentRoute: () => ConfigVersionDocsRoute,
} as any)

const VirtualVersionDocsFrameworkFrameworkIndexRoute =
  VirtualVersionDocsFrameworkFrameworkIndexImport.update({
    path: '/framework/$framework/',
    getParentRoute: () => VirtualVersionDocsRoute,
  } as any)

const TableVersionDocsFrameworkFrameworkIndexRoute =
  TableVersionDocsFrameworkFrameworkIndexImport.update({
    path: '/framework/$framework/',
    getParentRoute: () => TableVersionDocsRoute,
  } as any)

const StoreVersionDocsFrameworkFrameworkIndexRoute =
  StoreVersionDocsFrameworkFrameworkIndexImport.update({
    path: '/framework/$framework/',
    getParentRoute: () => StoreVersionDocsRoute,
  } as any)

const RouterVersionDocsFrameworkFrameworkIndexRoute =
  RouterVersionDocsFrameworkFrameworkIndexImport.update({
    path: '/framework/$framework/',
    getParentRoute: () => RouterVersionDocsRoute,
  } as any)

const RangerVersionDocsFrameworkFrameworkIndexRoute =
  RangerVersionDocsFrameworkFrameworkIndexImport.update({
    path: '/framework/$framework/',
    getParentRoute: () => RangerVersionDocsRoute,
  } as any)

const QueryVersionDocsFrameworkFrameworkIndexRoute =
  QueryVersionDocsFrameworkFrameworkIndexImport.update({
    path: '/framework/$framework/',
    getParentRoute: () => QueryVersionDocsRoute,
  } as any)

const FormVersionDocsFrameworkFrameworkIndexRoute =
  FormVersionDocsFrameworkFrameworkIndexImport.update({
    path: '/framework/$framework/',
    getParentRoute: () => FormVersionDocsRoute,
  } as any)

const VirtualVersionDocsFrameworkFrameworkSplatRoute =
  VirtualVersionDocsFrameworkFrameworkSplatImport.update({
    path: '/framework/$framework/$',
    getParentRoute: () => VirtualVersionDocsRoute,
  } as any)

const TableVersionDocsFrameworkFrameworkSplatRoute =
  TableVersionDocsFrameworkFrameworkSplatImport.update({
    path: '/framework/$framework/$',
    getParentRoute: () => TableVersionDocsRoute,
  } as any)

const StoreVersionDocsFrameworkFrameworkSplatRoute =
  StoreVersionDocsFrameworkFrameworkSplatImport.update({
    path: '/framework/$framework/$',
    getParentRoute: () => StoreVersionDocsRoute,
  } as any)

const RouterVersionDocsFrameworkFrameworkSplatRoute =
  RouterVersionDocsFrameworkFrameworkSplatImport.update({
    path: '/framework/$framework/$',
    getParentRoute: () => RouterVersionDocsRoute,
  } as any)

const RangerVersionDocsFrameworkFrameworkSplatRoute =
  RangerVersionDocsFrameworkFrameworkSplatImport.update({
    path: '/framework/$framework/$',
    getParentRoute: () => RangerVersionDocsRoute,
  } as any)

const QueryVersionDocsFrameworkFrameworkSplatRoute =
  QueryVersionDocsFrameworkFrameworkSplatImport.update({
    path: '/framework/$framework/$',
    getParentRoute: () => QueryVersionDocsRoute,
  } as any)

const FormVersionDocsFrameworkFrameworkSplatRoute =
  FormVersionDocsFrameworkFrameworkSplatImport.update({
    path: '/framework/$framework/$',
    getParentRoute: () => FormVersionDocsRoute,
  } as any)

const VirtualVersionDocsFrameworkFrameworkExamplesIndexRoute =
  VirtualVersionDocsFrameworkFrameworkExamplesIndexImport.update({
    path: '/framework/$framework/examples/',
    getParentRoute: () => VirtualVersionDocsRoute,
  } as any)

const TableVersionDocsFrameworkFrameworkExamplesIndexRoute =
  TableVersionDocsFrameworkFrameworkExamplesIndexImport.update({
    path: '/framework/$framework/examples/',
    getParentRoute: () => TableVersionDocsRoute,
  } as any)

const StoreVersionDocsFrameworkFrameworkExamplesIndexRoute =
  StoreVersionDocsFrameworkFrameworkExamplesIndexImport.update({
    path: '/framework/$framework/examples/',
    getParentRoute: () => StoreVersionDocsRoute,
  } as any)

const RouterVersionDocsFrameworkFrameworkExamplesIndexRoute =
  RouterVersionDocsFrameworkFrameworkExamplesIndexImport.update({
    path: '/framework/$framework/examples/',
    getParentRoute: () => RouterVersionDocsRoute,
  } as any)

const RangerVersionDocsFrameworkFrameworkExamplesIndexRoute =
  RangerVersionDocsFrameworkFrameworkExamplesIndexImport.update({
    path: '/framework/$framework/examples/',
    getParentRoute: () => RangerVersionDocsRoute,
  } as any)

const QueryVersionDocsFrameworkFrameworkExamplesIndexRoute =
  QueryVersionDocsFrameworkFrameworkExamplesIndexImport.update({
    path: '/framework/$framework/examples/',
    getParentRoute: () => QueryVersionDocsRoute,
  } as any)

const FormVersionDocsFrameworkFrameworkExamplesIndexRoute =
  FormVersionDocsFrameworkFrameworkExamplesIndexImport.update({
    path: '/framework/$framework/examples/',
    getParentRoute: () => FormVersionDocsRoute,
  } as any)

const VirtualVersionDocsFrameworkFrameworkExamplesSplatRoute =
  VirtualVersionDocsFrameworkFrameworkExamplesSplatImport.update({
    path: '/framework/$framework/examples/$',
    getParentRoute: () => VirtualVersionDocsRoute,
  } as any)

const TableVersionDocsFrameworkFrameworkExamplesSplatRoute =
  TableVersionDocsFrameworkFrameworkExamplesSplatImport.update({
    path: '/framework/$framework/examples/$',
    getParentRoute: () => TableVersionDocsRoute,
  } as any)

const StoreVersionDocsFrameworkFrameworkExamplesSplatRoute =
  StoreVersionDocsFrameworkFrameworkExamplesSplatImport.update({
    path: '/framework/$framework/examples/$',
    getParentRoute: () => StoreVersionDocsRoute,
  } as any)

const RouterVersionDocsFrameworkFrameworkExamplesSplatRoute =
  RouterVersionDocsFrameworkFrameworkExamplesSplatImport.update({
    path: '/framework/$framework/examples/$',
    getParentRoute: () => RouterVersionDocsRoute,
  } as any)

const RangerVersionDocsFrameworkFrameworkExamplesSplatRoute =
  RangerVersionDocsFrameworkFrameworkExamplesSplatImport.update({
    path: '/framework/$framework/examples/$',
    getParentRoute: () => RangerVersionDocsRoute,
  } as any)

const QueryVersionDocsFrameworkFrameworkExamplesSplatRoute =
  QueryVersionDocsFrameworkFrameworkExamplesSplatImport.update({
    path: '/framework/$framework/examples/$',
    getParentRoute: () => QueryVersionDocsRoute,
  } as any)

const FormVersionDocsFrameworkFrameworkExamplesSplatRoute =
  FormVersionDocsFrameworkFrameworkExamplesSplatImport.update({
    path: '/framework/$framework/examples/$',
    getParentRoute: () => FormVersionDocsRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_libraries': {
      preLoaderRoute: typeof LibrariesImport
      parentRoute: typeof rootRoute
    }
    '/blog': {
      preLoaderRoute: typeof BlogImport
      parentRoute: typeof rootRoute
    }
    '/config': {
      preLoaderRoute: typeof ConfigImport
      parentRoute: typeof rootRoute
    }
    '/dashboard': {
      preLoaderRoute: typeof DashboardImport
      parentRoute: typeof rootRoute
    }
    '/form': {
      preLoaderRoute: typeof FormImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/merch': {
      preLoaderRoute: typeof MerchImport
      parentRoute: typeof rootRoute
    }
    '/query': {
      preLoaderRoute: typeof QueryImport
      parentRoute: typeof rootRoute
    }
    '/ranger': {
      preLoaderRoute: typeof RangerImport
      parentRoute: typeof rootRoute
    }
    '/router': {
      preLoaderRoute: typeof RouterImport
      parentRoute: typeof rootRoute
    }
    '/sponsors-embed': {
      preLoaderRoute: typeof SponsorsEmbedImport
      parentRoute: typeof rootRoute
    }
    '/start': {
      preLoaderRoute: typeof StartImport
      parentRoute: typeof rootRoute
    }
    '/store': {
      preLoaderRoute: typeof StoreImport
      parentRoute: typeof rootRoute
    }
    '/table': {
      preLoaderRoute: typeof TableImport
      parentRoute: typeof rootRoute
    }
    '/virtual': {
      preLoaderRoute: typeof VirtualImport
      parentRoute: typeof rootRoute
    }
    '/blog/$': {
      preLoaderRoute: typeof BlogSplatImport
      parentRoute: typeof BlogImport
    }
    '/config/$version': {
      preLoaderRoute: typeof ConfigVersionImport
      parentRoute: typeof ConfigImport
    }
    '/form/$version': {
      preLoaderRoute: typeof FormVersionImport
      parentRoute: typeof FormImport
    }
    '/query/$version': {
      preLoaderRoute: typeof QueryVersionImport
      parentRoute: typeof QueryImport
    }
    '/ranger/$version': {
      preLoaderRoute: typeof RangerVersionImport
      parentRoute: typeof RangerImport
    }
    '/router/$version': {
      preLoaderRoute: typeof RouterVersionImport
      parentRoute: typeof RouterImport
    }
    '/start/$version': {
      preLoaderRoute: typeof StartVersionImport
      parentRoute: typeof StartImport
    }
    '/store/$version': {
      preLoaderRoute: typeof StoreVersionImport
      parentRoute: typeof StoreImport
    }
    '/table/$version': {
      preLoaderRoute: typeof TableVersionImport
      parentRoute: typeof TableImport
    }
    '/virtual/$version': {
      preLoaderRoute: typeof VirtualVersionImport
      parentRoute: typeof VirtualImport
    }
    '/blog/': {
      preLoaderRoute: typeof BlogIndexImport
      parentRoute: typeof BlogImport
    }
    '/config/': {
      preLoaderRoute: typeof ConfigIndexImport
      parentRoute: typeof ConfigImport
    }
    '/form/': {
      preLoaderRoute: typeof FormIndexImport
      parentRoute: typeof FormImport
    }
    '/query/': {
      preLoaderRoute: typeof QueryIndexImport
      parentRoute: typeof QueryImport
    }
    '/ranger/': {
      preLoaderRoute: typeof RangerIndexImport
      parentRoute: typeof RangerImport
    }
    '/router/': {
      preLoaderRoute: typeof RouterIndexImport
      parentRoute: typeof RouterImport
    }
    '/start/': {
      preLoaderRoute: typeof StartIndexImport
      parentRoute: typeof StartImport
    }
    '/store/': {
      preLoaderRoute: typeof StoreIndexImport
      parentRoute: typeof StoreImport
    }
    '/table/': {
      preLoaderRoute: typeof TableIndexImport
      parentRoute: typeof TableImport
    }
    '/virtual/': {
      preLoaderRoute: typeof VirtualIndexImport
      parentRoute: typeof VirtualImport
    }
    '/config/$version/docs': {
      preLoaderRoute: typeof ConfigVersionDocsImport
      parentRoute: typeof ConfigVersionImport
    }
    '/form/$version/docs': {
      preLoaderRoute: typeof FormVersionDocsImport
      parentRoute: typeof FormVersionImport
    }
    '/query/$version/docs': {
      preLoaderRoute: typeof QueryVersionDocsImport
      parentRoute: typeof QueryVersionImport
    }
    '/ranger/$version/docs': {
      preLoaderRoute: typeof RangerVersionDocsImport
      parentRoute: typeof RangerVersionImport
    }
    '/router/$version/docs': {
      preLoaderRoute: typeof RouterVersionDocsImport
      parentRoute: typeof RouterVersionImport
    }
    '/store/$version/docs': {
      preLoaderRoute: typeof StoreVersionDocsImport
      parentRoute: typeof StoreVersionImport
    }
    '/table/$version/docs': {
      preLoaderRoute: typeof TableVersionDocsImport
      parentRoute: typeof TableVersionImport
    }
    '/virtual/$version/docs': {
      preLoaderRoute: typeof VirtualVersionDocsImport
      parentRoute: typeof VirtualVersionImport
    }
    '/config/$version/docs/$': {
      preLoaderRoute: typeof ConfigVersionDocsSplatImport
      parentRoute: typeof ConfigVersionDocsImport
    }
    '/form/$version/docs/$': {
      preLoaderRoute: typeof FormVersionDocsSplatImport
      parentRoute: typeof FormVersionDocsImport
    }
    '/query/$version/docs/$': {
      preLoaderRoute: typeof QueryVersionDocsSplatImport
      parentRoute: typeof QueryVersionDocsImport
    }
    '/ranger/$version/docs/$': {
      preLoaderRoute: typeof RangerVersionDocsSplatImport
      parentRoute: typeof RangerVersionDocsImport
    }
    '/router/$version/docs/$': {
      preLoaderRoute: typeof RouterVersionDocsSplatImport
      parentRoute: typeof RouterVersionDocsImport
    }
    '/store/$version/docs/$': {
      preLoaderRoute: typeof StoreVersionDocsSplatImport
      parentRoute: typeof StoreVersionDocsImport
    }
    '/table/$version/docs/$': {
      preLoaderRoute: typeof TableVersionDocsSplatImport
      parentRoute: typeof TableVersionDocsImport
    }
    '/virtual/$version/docs/$': {
      preLoaderRoute: typeof VirtualVersionDocsSplatImport
      parentRoute: typeof VirtualVersionDocsImport
    }
    '/_libraries/config/$version/': {
      preLoaderRoute: typeof LibrariesConfigVersionIndexImport
      parentRoute: typeof LibrariesImport
    }
    '/_libraries/form/$version/': {
      preLoaderRoute: typeof LibrariesFormVersionIndexImport
      parentRoute: typeof LibrariesImport
    }
    '/_libraries/query/$version/': {
      preLoaderRoute: typeof LibrariesQueryVersionIndexImport
      parentRoute: typeof LibrariesImport
    }
    '/_libraries/ranger/$version/': {
      preLoaderRoute: typeof LibrariesRangerVersionIndexImport
      parentRoute: typeof LibrariesImport
    }
    '/_libraries/router/$version/': {
      preLoaderRoute: typeof LibrariesRouterVersionIndexImport
      parentRoute: typeof LibrariesImport
    }
    '/_libraries/start/$version/': {
      preLoaderRoute: typeof LibrariesStartVersionIndexImport
      parentRoute: typeof LibrariesImport
    }
    '/_libraries/store/$version/': {
      preLoaderRoute: typeof LibrariesStoreVersionIndexImport
      parentRoute: typeof LibrariesImport
    }
    '/_libraries/table/$version/': {
      preLoaderRoute: typeof LibrariesTableVersionIndexImport
      parentRoute: typeof LibrariesImport
    }
    '/_libraries/virtual/$version/': {
      preLoaderRoute: typeof LibrariesVirtualVersionIndexImport
      parentRoute: typeof LibrariesImport
    }
    '/config/$version/docs/': {
      preLoaderRoute: typeof ConfigVersionDocsIndexImport
      parentRoute: typeof ConfigVersionDocsImport
    }
    '/form/$version/docs/': {
      preLoaderRoute: typeof FormVersionDocsIndexImport
      parentRoute: typeof FormVersionDocsImport
    }
    '/query/$version/docs/': {
      preLoaderRoute: typeof QueryVersionDocsIndexImport
      parentRoute: typeof QueryVersionDocsImport
    }
    '/ranger/$version/docs/': {
      preLoaderRoute: typeof RangerVersionDocsIndexImport
      parentRoute: typeof RangerVersionDocsImport
    }
    '/router/$version/docs/': {
      preLoaderRoute: typeof RouterVersionDocsIndexImport
      parentRoute: typeof RouterVersionDocsImport
    }
    '/store/$version/docs/': {
      preLoaderRoute: typeof StoreVersionDocsIndexImport
      parentRoute: typeof StoreVersionDocsImport
    }
    '/table/$version/docs/': {
      preLoaderRoute: typeof TableVersionDocsIndexImport
      parentRoute: typeof TableVersionDocsImport
    }
    '/virtual/$version/docs/': {
      preLoaderRoute: typeof VirtualVersionDocsIndexImport
      parentRoute: typeof VirtualVersionDocsImport
    }
    '/form/$version/docs/framework/$framework/$': {
      preLoaderRoute: typeof FormVersionDocsFrameworkFrameworkSplatImport
      parentRoute: typeof FormVersionDocsImport
    }
    '/query/$version/docs/framework/$framework/$': {
      preLoaderRoute: typeof QueryVersionDocsFrameworkFrameworkSplatImport
      parentRoute: typeof QueryVersionDocsImport
    }
    '/ranger/$version/docs/framework/$framework/$': {
      preLoaderRoute: typeof RangerVersionDocsFrameworkFrameworkSplatImport
      parentRoute: typeof RangerVersionDocsImport
    }
    '/router/$version/docs/framework/$framework/$': {
      preLoaderRoute: typeof RouterVersionDocsFrameworkFrameworkSplatImport
      parentRoute: typeof RouterVersionDocsImport
    }
    '/store/$version/docs/framework/$framework/$': {
      preLoaderRoute: typeof StoreVersionDocsFrameworkFrameworkSplatImport
      parentRoute: typeof StoreVersionDocsImport
    }
    '/table/$version/docs/framework/$framework/$': {
      preLoaderRoute: typeof TableVersionDocsFrameworkFrameworkSplatImport
      parentRoute: typeof TableVersionDocsImport
    }
    '/virtual/$version/docs/framework/$framework/$': {
      preLoaderRoute: typeof VirtualVersionDocsFrameworkFrameworkSplatImport
      parentRoute: typeof VirtualVersionDocsImport
    }
    '/form/$version/docs/framework/$framework/': {
      preLoaderRoute: typeof FormVersionDocsFrameworkFrameworkIndexImport
      parentRoute: typeof FormVersionDocsImport
    }
    '/query/$version/docs/framework/$framework/': {
      preLoaderRoute: typeof QueryVersionDocsFrameworkFrameworkIndexImport
      parentRoute: typeof QueryVersionDocsImport
    }
    '/ranger/$version/docs/framework/$framework/': {
      preLoaderRoute: typeof RangerVersionDocsFrameworkFrameworkIndexImport
      parentRoute: typeof RangerVersionDocsImport
    }
    '/router/$version/docs/framework/$framework/': {
      preLoaderRoute: typeof RouterVersionDocsFrameworkFrameworkIndexImport
      parentRoute: typeof RouterVersionDocsImport
    }
    '/store/$version/docs/framework/$framework/': {
      preLoaderRoute: typeof StoreVersionDocsFrameworkFrameworkIndexImport
      parentRoute: typeof StoreVersionDocsImport
    }
    '/table/$version/docs/framework/$framework/': {
      preLoaderRoute: typeof TableVersionDocsFrameworkFrameworkIndexImport
      parentRoute: typeof TableVersionDocsImport
    }
    '/virtual/$version/docs/framework/$framework/': {
      preLoaderRoute: typeof VirtualVersionDocsFrameworkFrameworkIndexImport
      parentRoute: typeof VirtualVersionDocsImport
    }
    '/form/$version/docs/framework/$framework/examples/$': {
      preLoaderRoute: typeof FormVersionDocsFrameworkFrameworkExamplesSplatImport
      parentRoute: typeof FormVersionDocsImport
    }
    '/query/$version/docs/framework/$framework/examples/$': {
      preLoaderRoute: typeof QueryVersionDocsFrameworkFrameworkExamplesSplatImport
      parentRoute: typeof QueryVersionDocsImport
    }
    '/ranger/$version/docs/framework/$framework/examples/$': {
      preLoaderRoute: typeof RangerVersionDocsFrameworkFrameworkExamplesSplatImport
      parentRoute: typeof RangerVersionDocsImport
    }
    '/router/$version/docs/framework/$framework/examples/$': {
      preLoaderRoute: typeof RouterVersionDocsFrameworkFrameworkExamplesSplatImport
      parentRoute: typeof RouterVersionDocsImport
    }
    '/store/$version/docs/framework/$framework/examples/$': {
      preLoaderRoute: typeof StoreVersionDocsFrameworkFrameworkExamplesSplatImport
      parentRoute: typeof StoreVersionDocsImport
    }
    '/table/$version/docs/framework/$framework/examples/$': {
      preLoaderRoute: typeof TableVersionDocsFrameworkFrameworkExamplesSplatImport
      parentRoute: typeof TableVersionDocsImport
    }
    '/virtual/$version/docs/framework/$framework/examples/$': {
      preLoaderRoute: typeof VirtualVersionDocsFrameworkFrameworkExamplesSplatImport
      parentRoute: typeof VirtualVersionDocsImport
    }
    '/form/$version/docs/framework/$framework/examples/': {
      preLoaderRoute: typeof FormVersionDocsFrameworkFrameworkExamplesIndexImport
      parentRoute: typeof FormVersionDocsImport
    }
    '/query/$version/docs/framework/$framework/examples/': {
      preLoaderRoute: typeof QueryVersionDocsFrameworkFrameworkExamplesIndexImport
      parentRoute: typeof QueryVersionDocsImport
    }
    '/ranger/$version/docs/framework/$framework/examples/': {
      preLoaderRoute: typeof RangerVersionDocsFrameworkFrameworkExamplesIndexImport
      parentRoute: typeof RangerVersionDocsImport
    }
    '/router/$version/docs/framework/$framework/examples/': {
      preLoaderRoute: typeof RouterVersionDocsFrameworkFrameworkExamplesIndexImport
      parentRoute: typeof RouterVersionDocsImport
    }
    '/store/$version/docs/framework/$framework/examples/': {
      preLoaderRoute: typeof StoreVersionDocsFrameworkFrameworkExamplesIndexImport
      parentRoute: typeof StoreVersionDocsImport
    }
    '/table/$version/docs/framework/$framework/examples/': {
      preLoaderRoute: typeof TableVersionDocsFrameworkFrameworkExamplesIndexImport
      parentRoute: typeof TableVersionDocsImport
    }
    '/virtual/$version/docs/framework/$framework/examples/': {
      preLoaderRoute: typeof VirtualVersionDocsFrameworkFrameworkExamplesIndexImport
      parentRoute: typeof VirtualVersionDocsImport
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren([
  IndexRoute,
  LibrariesRoute.addChildren([
    LibrariesConfigVersionIndexRoute,
    LibrariesFormVersionIndexRoute,
    LibrariesQueryVersionIndexRoute,
    LibrariesRangerVersionIndexRoute,
    LibrariesRouterVersionIndexRoute,
    LibrariesStartVersionIndexRoute,
    LibrariesStoreVersionIndexRoute,
    LibrariesTableVersionIndexRoute,
    LibrariesVirtualVersionIndexRoute,
  ]),
  BlogRoute.addChildren([BlogSplatRoute, BlogIndexRoute]),
  ConfigRoute.addChildren([
    ConfigVersionRoute.addChildren([
      ConfigVersionDocsRoute.addChildren([
        ConfigVersionDocsSplatRoute,
        ConfigVersionDocsIndexRoute,
      ]),
    ]),
    ConfigIndexRoute,
  ]),
  DashboardRoute,
  FormRoute.addChildren([
    FormVersionRoute.addChildren([
      FormVersionDocsRoute.addChildren([
        FormVersionDocsSplatRoute,
        FormVersionDocsIndexRoute,
        FormVersionDocsFrameworkFrameworkSplatRoute,
        FormVersionDocsFrameworkFrameworkIndexRoute,
        FormVersionDocsFrameworkFrameworkExamplesSplatRoute,
        FormVersionDocsFrameworkFrameworkExamplesIndexRoute,
      ]),
    ]),
    FormIndexRoute,
  ]),
  LoginRoute,
  MerchRoute,
  QueryRoute.addChildren([
    QueryVersionRoute.addChildren([
      QueryVersionDocsRoute.addChildren([
        QueryVersionDocsSplatRoute,
        QueryVersionDocsIndexRoute,
        QueryVersionDocsFrameworkFrameworkSplatRoute,
        QueryVersionDocsFrameworkFrameworkIndexRoute,
        QueryVersionDocsFrameworkFrameworkExamplesSplatRoute,
        QueryVersionDocsFrameworkFrameworkExamplesIndexRoute,
      ]),
    ]),
    QueryIndexRoute,
  ]),
  RangerRoute.addChildren([
    RangerVersionRoute.addChildren([
      RangerVersionDocsRoute.addChildren([
        RangerVersionDocsSplatRoute,
        RangerVersionDocsIndexRoute,
        RangerVersionDocsFrameworkFrameworkSplatRoute,
        RangerVersionDocsFrameworkFrameworkIndexRoute,
        RangerVersionDocsFrameworkFrameworkExamplesSplatRoute,
        RangerVersionDocsFrameworkFrameworkExamplesIndexRoute,
      ]),
    ]),
    RangerIndexRoute,
  ]),
  RouterRoute.addChildren([
    RouterVersionRoute.addChildren([
      RouterVersionDocsRoute.addChildren([
        RouterVersionDocsSplatRoute,
        RouterVersionDocsIndexRoute,
        RouterVersionDocsFrameworkFrameworkSplatRoute,
        RouterVersionDocsFrameworkFrameworkIndexRoute,
        RouterVersionDocsFrameworkFrameworkExamplesSplatRoute,
        RouterVersionDocsFrameworkFrameworkExamplesIndexRoute,
      ]),
    ]),
    RouterIndexRoute,
  ]),
  SponsorsEmbedRoute,
  StartRoute.addChildren([StartVersionRoute, StartIndexRoute]),
  StoreRoute.addChildren([
    StoreVersionRoute.addChildren([
      StoreVersionDocsRoute.addChildren([
        StoreVersionDocsSplatRoute,
        StoreVersionDocsIndexRoute,
        StoreVersionDocsFrameworkFrameworkSplatRoute,
        StoreVersionDocsFrameworkFrameworkIndexRoute,
        StoreVersionDocsFrameworkFrameworkExamplesSplatRoute,
        StoreVersionDocsFrameworkFrameworkExamplesIndexRoute,
      ]),
    ]),
    StoreIndexRoute,
  ]),
  TableRoute.addChildren([
    TableVersionRoute.addChildren([
      TableVersionDocsRoute.addChildren([
        TableVersionDocsSplatRoute,
        TableVersionDocsIndexRoute,
        TableVersionDocsFrameworkFrameworkSplatRoute,
        TableVersionDocsFrameworkFrameworkIndexRoute,
        TableVersionDocsFrameworkFrameworkExamplesSplatRoute,
        TableVersionDocsFrameworkFrameworkExamplesIndexRoute,
      ]),
    ]),
    TableIndexRoute,
  ]),
  VirtualRoute.addChildren([
    VirtualVersionRoute.addChildren([
      VirtualVersionDocsRoute.addChildren([
        VirtualVersionDocsSplatRoute,
        VirtualVersionDocsIndexRoute,
        VirtualVersionDocsFrameworkFrameworkSplatRoute,
        VirtualVersionDocsFrameworkFrameworkIndexRoute,
        VirtualVersionDocsFrameworkFrameworkExamplesSplatRoute,
        VirtualVersionDocsFrameworkFrameworkExamplesIndexRoute,
      ]),
    ]),
    VirtualIndexRoute,
  ]),
])

/* prettier-ignore-end */
